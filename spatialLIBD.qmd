---
title: "Exploration with spatialLIBD"
format: 
  html:
    toc: true
    toc-depth: 3
    link-external-newwindow: true
echo: false
editor: visual
---

```{r setup}
#| output: false
library(spatialLIBD)
library(dplyr)
library(ggplot2)
library(scran)
library(scry)
library(ggspavis)
library(gridExtra)
library(ggrepel)
source("code/helper_functions.r")
set.seed(123)
```

## Intro

We chose to develop our method on an unrelated DLPFC dataset available through the [spatialLIBD](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-022-08601-w) package. This way we can explore how to identify batch-biased features while being blinded to how the approach will impact our dataset.

First, we chose a feature selection method that can incorporate a batch variable into the model. Next, we compared the per-gene ranks and dispersion values when the model was run with and without a batch effect. Finally, we confirmed that the genes identified as biased did exhibit expression patterns consistent with non-biological technical noise.

#### spatialLIBD example dataset {.unnumbered}

The spatialLIBD dataset was collected from the same brain region as our data (DLPFC) and was also sequenced with 10X Visium. This dataset has 3 subjects and 4 samples from each subject. Because there was no slide metadata available, we investigated whether `batch = subject` influenced the top features.

```{r fake load spe}
#| echo: true
#| eval: false
library(spatialLIBD)
spe <- fetch_data(type = "spe")
```

```{r hidden load spe}
spe <- readRDS("processed-data/spe_spatialLIBD_n12.rda")
```

```{r spe subject design}
table(colData(spe)[,c("sample_id","subject")])
```

## Feature selection comparison

We examined two different models of feature selection. The first model is from [scran](https://www.nature.com/articles/nmeth.2645) and utilizes per-gene variance to identify top features. This method, here referred to as the **mean-variance model**, is performed after normalization of the counts matrix. We opted to use the `modelGeneVarByPoisson` function which assumes that the mean-variance relationship trend due to technical noise follow a poisson distribution.

```{r hvg model}
#| echo: true
mv <- modelGeneVarByPoisson(logcounts(spe))
```

```{r hvg model rank}
mv$ensembl = rownames(mv)
mv$rank = (nrow(mv)+1)-rank(mv$bio)
top_hvgs <- getTopHVGs(mv, n = 3000)
```

The second approach from [scry](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1861-6) fits a model to the raw counts matrix and assumes that genes with no biologically meaningful expression pattern will fit a binomial distribution. The greater the per-gene deviance from this null model, the more likely the expression of said gene is biologically meaningful as a top feature. We refer to this method as the **binomial deviance model**.

```{r dev model}
#| echo: true
bd <- devianceFeatureSelection(counts(spe), fam="binomial")
```

```{r dev model rank}
bd.df = cbind.data.frame("gene"=names(bd),
                         "gene_name"=rowData(spe)[names(bd),"gene_name"],
                         "dev"= bd,
                         "rank"=(length(bd)+1)-rank(bd))
rownames(bd.df) = bd.df$gene
```

### How do SVGs rank in each model?

Our goal is to determine whether SVGs exhibit biased expression according of different batch variables. Therefore, the ideal feature selection model would similarly identify SVGs as highly ranked features.

We ran the `nnSVG` model on the `spatialLIBD` data to identify SVGs. We next examined the rank of these features in the mean-variance model and the binomial deviance model.

```{r read svgs}
#| echo: true
libd.svgs = read.csv("processed-data/libd-all_nnSVG_p-05-features-df.csv", 
                     row.names=1)
```

```{r add svg to model dfs}
mv$is_svg = factor(mv$ensembl %in% libd.svgs$gene_id, 
                        levels=c(TRUE,FALSE), labels=c("SVGs","not SVGs"))
bd.df$is_svg = factor(bd.df$gene %in% libd.svgs$gene_id, 
                      levels=c(TRUE,FALSE), labels=c("SVGs","not SVGs"))
```

```{r plot var model}
var1 <- ggplot(mv, aes(x=rank, y=bio, color=is_svg))+
  geom_point(size=.5)+scale_color_manual(values=c("tomato","black"))+
  labs(title="mean-variance", 
       y="variance", color="")+
  theme_bw()+theme(legend.position="inside", legend.position.inside=c(.8,.8))
```

```{r plot dev model}
dev1 <- ggplot(bd.df, aes(x=rank, y=dev, color=is_svg))+
  geom_point(size=.5)+scale_color_manual(values=c("tomato","black"))+
  labs(title="binomial deviance", 
       y="deviance", color="")+
  theme_bw()+theme(legend.position="inside", legend.position.inside=c(.8,.8),
                   axis.text.y=element_text(size=6))
```

We found that the mean-variance model ranked a considerable portion of the SVGs as some of the lowest features in the dataset. In contrast, all the SVGs were ranked highly with the binomial deviance model.

*Figure 2.1 Bionomial deviance model better corresponds to nnSVG results*

```{r view models}
#| fig-height: 3
#| fig-width: 6
grid.arrange(addSmallLegend(var1, textSize = 8), 
             addSmallLegend(dev1, textSize = 8), ncol=2)
```

### Are top ranked genes representative of layer-specific differences in gene expression?

A separate but related property of the ideal feature selection model would be to generate a list of top features that are consistent with known DLPFC layer markers and comprise markers of all layer domains. We used the recently published list of DLPFC layer markers from [Huuki-Meyers et. al, 2024](https://www%3E.science.org/doi/abs/10.1126/science.adh1938) Table S8 to characterize the top 3000 features of the mean-variance and binomial deviance models.

```{r read layer markers}
#| echo: true
lm.df = read.csv("processed-data/TableS8_filtered-layer-markers.csv")
```

```{r prep colors}
cols_cluster = c("#1f77b4FF","#aec7e8FF","#ff7f0eFF","#ffbb78FF","#2ca02cFF","#98df8aFF","#d62728FF")

cols_7 = c(cols_cluster[c(4,2,1,5,6,7)],"grey40")
```

```{r label hvgs as lm}
#modelGeneVarByPoisson
is.lm = semi_join(lm.df[,c("gene","ensembl","domain_simple")], 
                  as.data.frame(mv[top_hvgs,]),
                  by=c("ensembl")) 

not.lm = anti_join(filter(as.data.frame(mv[top_hvgs,]), ensembl %in% 
                            setdiff(top_hvgs, is.lm$ensembl)), 
                   is.lm, 
                   by=c("ensembl")) %>%
  mutate(domain_simple="none")

mv.lm.df = bind_rows(is.lm, not.lm) %>% 
  mutate(domain_simple=factor(domain_simple, 
                              levels=c("L1","L2","L3","L4","L5","L6","WM","none")))
```

```{r plot hvg lm}
var2 <- ggplot(mv.lm.df, aes(x=domain_simple, fill=domain_simple))+
  geom_bar(stat="count", width=.7, color="black")+
  scale_fill_manual(values=c(cols_7[1:3],"white",cols_7[4:7]))+
  labs(x="DLPFC domain",y="# top genes", 
       title="mean-variance", fill="")+
  theme_bw()+theme(legend.position="none")
```

```{r label dev as lm}
#devianceFeatureSelection
is.lm = semi_join(lm.df[,c("gene","ensembl","domain_simple")], 
                  filter(bd.df, rank<=3000),
                  by=c("ensembl"="gene")) 

not.lm = anti_join(filter(bd.df, rank<=3000, 
                          gene %in% setdiff(bd.df$gene, is.lm$ensembl)), 
                   is.lm, 
                   by=c("gene"="ensembl")) %>%
  mutate(domain_simple="none") %>%
  rename(ensembl=gene)

bd.lm.df = bind_rows(is.lm, not.lm) %>% 
  mutate(domain_simple=factor(domain_simple, 
                              levels=c("L1","L2","L3","L4","L5","L6","WM","none")))
```

```{r plot dev lm}
dev2 <- ggplot(bd.lm.df, aes(x=domain_simple, fill=domain_simple))+
  geom_bar(stat="count", width=.7, color="black")+
  scale_fill_manual(values=c(cols_7[1:3],"white",cols_7[4:7]))+
  labs(x="DLPFC domain", y="# top genes", 
       title="binomial deviance", fill="")+
  theme_bw()+theme(legend.position="none")
```

These results further supported the selection of the binomial deviance model, as the 3000 most highly ranked features represented significant markers for all DLPFC cortical layers. In contrast, the 3000 most highly ranked features from the mean-variance model were overwhelmingly L1 and white matter (WM) markers.

*Figure 2.2 Binomial deviance model better corresponds to known DLPFC layer markers*

```{r view top genes as lm}
#| fig-height: 3
#| fig-width: 6
grid.arrange(var2, dev2, ncol=2)
```

## Influence of batch in binomial deviance model output

Having picked a feature selection method, next we compared the per-gene ranks and deviance values when the model was run with and without a batch effect. Because the `spatialLIBD` data has 4 samples per subject, we used `batch= subject`.

```{r dev model batch}
#| echo: true
bd.batch <- devianceFeatureSelection(counts(spe), fam="binomial", 
                                     batch=as.factor(spe$subject))
```

```{r dev model batch rank}
bd.batch.df = cbind.data.frame("gene"=rownames(spe),
                               "gene_name"=rowData(spe)$gene_name,
                               "dev"= bd.batch,
                               "rank"=(length(bd.batch)+1)-rank(bd.batch))
rownames(bd.batch.df) = bd.batch.df$gene
bd.batch.df$is_svg = factor(bd.batch.df$gene %in% libd.svgs$gene_id, 
                      levels=c(TRUE,FALSE), labels=c("SVGs","not SVGs"))
```

```{r plot dev model batch}
dev3 <- ggplot(bd.batch.df, aes(x=rank, y=dev, color=is_svg))+
  geom_point(size=.5)+scale_color_manual(values=c("red","black"))+
  labs(title="batch = subject", 
       y="deviance", color="")+
  theme_bw()+theme(legend.position="inside", legend.position.inside=c(.8,.8),
                   axis.text.y=element_text(size=6))
```

Including a subject-batch effect doesnâ€™t dramatically change the rank of the SVGs.

*Figure 2.3 SVGs are consistently highly ranked in binomial deviance model with and without batch*

```{r view dev models svgs}
#| fig-height: 3
#| fig-width: 6
grid.arrange(addSmallLegend(dev1, textSize = 8)+ggtitle("batch = NULL"), 
             addSmallLegend(dev3, textSize = 8), ncol=2)
```

We see that \>90% of `spatialLIBD` SVGs are ranked in the top 3000 features by either binomial deviance model.

```{r}
#| echo: true
quantile(bd.df[libd.svgs$gene_id,"rank"], probs=seq(0,1,.1))
quantile(bd.batch.df[libd.svgs$gene_id,"rank"], probs=seq(0,1,.1))
```

This suggests that `scry::devianceFeatureSelection` could be a good alternative to `nnSVG` feature selection if there is considerable technical variation in the experiment/ dataset. It can also be run much faster.

### Highly deviant genes

Now we can examine the influence of `batch= subject` on the per-gene deviance values and ranks. Since we propose that using a binomial deviance model to select top features is a possible alternative to `nnSVG` feature selection we will first examine the top features as ranked based on the binomial deviance model (rank\<=3000 in either model).

```{r join dev models}
#| echo: true
subject.df <- left_join(bd.df, bd.batch.df,
                       by=c("gene", "gene_name","is_svg"),
                       suffix=c("_default","_subject"))
```

Recall that the greater the per-gene deviance, the more likely the expression of said gene is biologically meaningful. Therefore, a decrease in deviance when including `batch= subject` indicates that subject identity accounted for variation in gene expression that was previously considered to be biologically meaningful. Not all magnitudes of change in deviance are noteworthy, so we examined the change in deviance relative to the final deviance value in the batch effect model.

```{r dev diff}
#| echo: true
subject.df$d.diff = (subject.df$dev_default-subject.df$dev_subject)/subject.df$dev_subject
```

Since more lowly ranked features are considered more important, an increase in rank when including`batch= subject` indicates that the relative importance of the feature is diminished once subject identity is accounted for.

```{r rank diff}
#| echo: true
subject.df$r.diff = subject.df$rank_subject-subject.df$rank_default
```

```{r highly deviant genes}
top.df <- filter(subject.df, rank_default<=3000, rank_subject<=3000)
```

```{r plot dev diff}
delta1 <- ggplot(top.df, aes(x=dev_default, y=dev_subject, color=d.diff))+
  geom_point()+
  geom_text_repel(data=filter(top.df, d.diff>1), aes(label=gene_name))+
  scale_x_log10()+scale_y_log10()+
  scale_color_viridis_c(option="F", direction=-1)+
  geom_abline(aes(slope=1, intercept=0), lty=2)+
  labs(x="deviance (no batch)", y="deviance (batch)", title="\u0394 deviance")+
  theme_bw()+theme(legend.position="inside", legend.position.inside=c(.1,.8),
                   legend.title = element_text(size = 10),
                   legend.text  = element_text(size = 10),
                   legend.key.size = unit(.6, "lines"))
```

```{r plot rank diff}
delta2 <- ggplot(top.df, aes(x=rank_default, y=rank_subject, color=r.diff))+
  geom_point()+scale_y_reverse()+
  geom_text_repel(data=filter(top.df, r.diff>1000), aes(label=gene_name))+
  scale_color_viridis_c(option="F", direction=-1)+
  geom_abline(aes(slope=-1, intercept=0), lty=2)+
  labs(x="rank (no batch)",y="rank (batch)", title="\u0394 rank")+
  theme_bw()+theme(legend.position="inside", legend.position.inside=c(.8,.8),
                   legend.title = element_text(size = 10), 
                   legend.text  = element_text(size = 10),
                   legend.key.size = unit(.6, "lines"))
```

*Figure 2.4 Influence of batch on highly deviant genes (n= 3000)*

```{r view diff plots}
#| fig-height: 3.5
#| fig-width: 7
grid.arrange(delta1, delta2, ncol=2)
```

Our approach suggests that when batch is included in the binomial deviance model, some highly ranked features still show signs of having reductions in deviance that was previously attributed to biological variation. One of these features is RPS4Y1, which is located on the Y chromosome and therefore ought to exhibit substantial between-subject differences based on sex.

### Spatially variable genes

Now we will examine whether the change in deviance and the change in rank also highlight SVGs that are potentially subject-biased.

```{r is svg}
#| echo: true
top.svg.df = filter(subject.df, gene %in% libd.svgs$gene_id)
```

```{r plot svgs ddiff}
delta3 <- ggplot(top.svg.df, aes(x=dev_default, y=dev_subject, color=d.diff))+
  geom_point()+
  geom_text_repel(data=filter(top.svg.df, d.diff>1), aes(label=gene_name))+
  scale_x_log10()+scale_y_log10()+
  scale_color_viridis_c(option="F", direction=-1)+
  geom_abline(aes(slope=1, intercept=0), lty=2)+
  labs(x="deviance (no batch)", y="deviance (batch)", title="\u0394 deviance")+
  theme_bw()+theme(legend.position="inside", legend.position.inside=c(.15,.8),
                   legend.title = element_text(size = 10),
                   legend.text  = element_text(size = 10),
                   legend.key.size = unit(.6, "lines"))
```

```{r plot svgs rdiff}
delta4 <- ggplot(top.svg.df, aes(x=rank_default, y=rank_subject, color=r.diff))+
  geom_point()+scale_y_reverse()+xlim(0,6000)+
  geom_text_repel(data=filter(top.svg.df, r.diff>1000), aes(label=gene_name))+
  scale_color_viridis_c(option="F", direction=-1)+
  geom_abline(aes(slope=-1, intercept=0), lty=2)+
  labs(x="rank (no batch)",y="rank (batch)", title="\u0394 rank")+
  theme_bw()+theme(legend.position="inside", legend.position.inside=c(.85,.8),
                   legend.title = element_text(size = 10), 
                   legend.text  = element_text(size = 10),
                   legend.key.size = unit(.6, "lines"))
```

Our approach indicates that the two genes with the strongest potential to exhibit subject-biased expression patterns in a way that confounds biological variation are also SVGs (MTRNR2L1, MTRNR2L8). In addition we identify Xist as subject-biased. Xist is a lncRNA that is robustly expressed in females due to its importance for X inactivation. The identification of Xist as a subject-biased gene indicates that our approach works as intended (picking up features with non-spatially relevant sources of variation).

*Figure 2.5 Influence of batch on SVGs (n= 1967)*

```{r view svgs diff}
#| fig-height: 3.5
#| fig-width: 7
grid.arrange(delta3, delta4, ncol=2)
```

```{r}
svg <- ggplot(top.svg.df, aes(x=r.diff, y=d.diff))+
  geom_point()+
  geom_point(data=filter(top.svg.df, gene_name %in% c("MTRNR2L1","MTRNR2L8","XIST")), color="red2")+
  geom_point(data=filter(top.svg.df, gene_name %in% 
                           grep("MT-", top.svg.df$gene_name, value=T)), 
             color="grey")+
  geom_text_repel(data= filter(top.svg.df, gene_name=="MT3"), 
                  aes(label=gene_name), size=3)+
    geom_text_repel(data=filter(top.svg.df, gene_name %in% 
                                  c("MTRNR2L1","MTRNR2L8","XIST")),
                    aes(label=gene_name), size=3, color="red")+
  ggbreak::scale_y_break(c(.5, 3), scales=.25, ticklabels=c(seq(0,.5,.1),3.0,3.1,3.2))+
  #scale_color_manual(values=c("grey40","red3","black"))+
  labs(x="\u0394 rank", y="\u0394 deviance", title="SVGs (n=1967)")+
  theme_bw()+theme(legend.position="none", title=element_text(size=10))
```

```{r}
top <- ggplot(top.df, aes(x=r.diff, y=d.diff))+
  geom_point()+
  geom_point(data=filter(top.df, gene_name %in% c("MTRNR2L1","MTRNR2L8","RPS4Y1")), color="red2")+
  geom_point(data=filter(top.df, gene_name %in% 
                           grep("MT-", top.df$gene_name, value=T)), 
             color="grey")+
  geom_text_repel(data= filter(top.df, gene_name %in% c("MT3","RPS26")), 
                  aes(label=gene_name), size=3)+
  geom_text_repel(data= filter(top.df, gene_name %in% 
                                 c("MTRNR2L1","MTRNR2L8","RPS4Y1")), 
                  aes(label=gene_name), size=3, color="red")+
  ggbreak::scale_y_break(c(.5, 3), scales=.25, ticklabels=c(seq(0,.5,.1),3.0,3.1,3.2))+
  #scale_color_manual(values=c("grey40","red3","black"))+
  labs(x="\u0394 rank", y="\u0394 deviance", title="Top deviance (n=3000)")+
  theme_bw()+theme(legend.position="none", title=element_text(size=10))
```

## Spatial expression plots to confirm bias

Our approach suggests that even when batch correction is performed, there can still be some highly ranked genes that exhibit the potential for strong subject-bias. Further, three of these potentially biased features are SVGs.

Plotting the rank difference and relative change in deviance together shows that the mitochondrial genome (grey) has a distinct pattern on no change in rank and many chrM genes have relatively high change in deviance compared to non-biased genes. If we remove the chrM genes (as is often done in feature selection), this leaves two additional features that are outliers from the rest of the top features or SVGs (RPS26 and MT3).

*Figure 2.6 Mitochondrial genome and potential additional biased genes*

```{r}
#| fig-height: 3.5
#| fig-width: 7
grid.arrange(print(top), print(svg), ncol=2, 
             bottom="biased genes (red), chrM (grey)")
```

To confirm a strong influence of subject/ brain donor for potentially biased genes we looked at the spatial expression plots.

We first examine XIST (spatially variable) and RPS4Y1 (highly deviant), given that both genes are located on sex chromosomes and therefore ought to exhibit strong differences in expression between subjects.

```{r change sample ids}
spe$tissue = as.character(factor(paste(spe$position, spe$replicate), 
                                 levels=c("0 1","0 2","300 1","300 2"),
                                 labels=c("s1","s2","s3","s4")))
spe$sample_id = paste(spe$subject, spe$tissue)
```

```{r sex spatial plots}
#| output: false
xist <- plotSpots(spe, annotate="ENSG00000229807", assay="logcounts", 
          sample_id="sample_id", point_size=.1)+ggtitle("XIST")+
  scale_color_gradient(low='grey90', high='black')
rpsy <- plotSpots(spe, annotate="ENSG00000129824", assay="logcounts", 
          sample_id="sample_id", point_size=.1)+ggtitle("RPS4Y1")+
  scale_color_gradient(low='grey90', high='black')
```

*Figure 2.7 Sex-linked genes exhibit strong subject bias*

```{r}
#| fig-height: 6
#| fig-width: 14
grid.arrange(xist, rpsy, ncol=2)
```

The two remaining features with potential subject bias (MTRNR2L1 and MTRNR2L8) are both highly deviant and spatially variable. These lncRNAs have an unknown biological function. Spatial expression plots illustrate that these features display strong subject-biased expression and are also clearly enriched in certain spatial domains. MTRNR2L1 and MTRNR2L8 are perfect examples of features that may introduce noise if included in spatial domain clustering.

```{r mtrmr spatial plot}
#| output: false
ml1 <- plotSpots(spe, annotate="ENSG00000256618", assay="logcounts", 
          sample_id="sample_id", point_size=.1)+ggtitle("MTRNR2L1")+
  scale_color_gradient(low='grey90', high='black')
ml8 <- plotSpots(spe, annotate="ENSG00000255823", assay="logcounts", 
          sample_id="sample_id", point_size=.1)+ggtitle("MTRNR2L8")+
  scale_color_gradient(low='grey90', high='black')
```

*Figure 2.8 Successful identification subject-biased, spatially variable genes*

```{r view mtrnr plot}
#| fig-height: 6
#| fig-width: 14
grid.arrange(ml1, ml8, ncol=2)
```

```{r additional plots}
#| output: false
rps26 <- plotSpots(spe, annotate="ENSG00000197728", assay="logcounts", 
          sample_id="sample_id", point_size=.1)+ggtitle("RPS26")+
  scale_color_gradient(low='grey90', high='black')
mt3 <- plotSpots(spe, annotate="ENSG00000087250", assay="logcounts", 
          sample_id="sample_id", point_size=.1)+ggtitle("MT3")+
  scale_color_gradient(low='grey90', high='black')
```

Lastly, RPS26 and MT3 do not display such strong subject-specific expression. This indicates that our original thresholds chosen without consideration of the location of features from the mitochondrial genome was most appropriate.

*Figure 2.9 RPS26 and MT3 should not be excluded due to bias*

```{r view additional plots}
#| fig-height: 6
#| fig-width: 14
grid.arrange(rps26, mt3, ncol=2)
```
