---
title: "MBv: batch = slide"
format: 
  html:
    toc: true
    toc-depth: 3
echo: false
editor: visual
---

```{r setup}
#| output: false
library(SpatialExperiment)
library(dplyr)
library(ggplot2)
library(ggspavis)
library(gridExtra)
library(ggrepel)
load("processed-data/spe_norm.Rdata")
source("code/helper_functions.r")
```

Having established the ability of the approach with a sample dataset, we now switch gears to look at our own data.

## Intro to MBv project

#### Goal of this analysis {.unnumbered}

As established in the Intro\[LINK CHAPTER\], the goal of this analysis is to perform feature-based QC to remove features contributing to non-spatially meaningful biological variation from our list of spatially variable genes (SVGs).

As we showed in the spatialLIBD example, using `nnSVG` or `scry::devianceFeatureSelection` produced feature lists that represented the spectrum of layer-specific markers in the DLPFC (FIGURE). Further, SVGs were the most highly ranked features based on deviance (FIGURE), when all genes were input to the model.

Because of this, we decided to run `devianceFeatureSelection` on only the SVGs.

#### Experimental design {.unnumbered}

24 human DLPFC samples, 1 sample per subject/ brain donor, 4 samples per slide (6 slides), 2 M 2 F each slide

We first investigated a slide effect.

## Binomial model deviance residuals

Based on

```{r read binomial deviance results}
#| echo: true
slide.df = read.csv("processed-data/bindev_default-slide_svgs-only.csv")
```

```{r plot default}
sl1 = ggplot(slide.df, aes(x=rank_default, y=dev_default))+
  geom_point(size=.5)+
  scale_y_log10()+
  labs(x="rank", y="deviance", title="Batch = null")+
  theme_bw()
```

```{r plot batch}
sl2 = ggplot(slide.df, aes(x=rank_slide, y=dev_slide))+
  geom_point(size=.5)+
  scale_y_log10()+
  labs(x="rank", y="deviance", title="Batch = slide")+
  theme_bw()
```

```{r view slide models}
#| fig-height: 3
#| fig-width: 5
grid.arrange(sl1, sl2, ncol=2, top="Binomial model performed on SVGs only (2098 genes)",
             bottom="dataset = MBv, n = 24 samples")
```

```{r calc diff}
#| echo: true
#care about loss of deviance
slide.df$d.diff = (slide.df[,"dev_default"]-slide.df[,"dev_slide"])/slide.df$dev_slide
# care about increase in rank
slide.df$r.diff = slide.df[,"rank_slide"]-slide.df[,"rank_default"]
```

```{r plot dev diff}
dev1 <- ggplot(slide.df, aes(x=dev_default, y=dev_slide, color=d.diff))+
  geom_point()+
  scale_x_log10()+scale_y_log10()+
  geom_text_repel(data=filter(slide.df, d.diff>.5), aes(label=gene_name))+
  scale_color_viridis_c(option="F", direction=-1)+
  geom_abline(aes(slope=1, intercept=0), lty=2)+
  labs(x="deviance (no batch)", y="deviance (batch)", subtitle="\u0394 dev")+
  theme_bw()
```

```{r plot rank diff}
rank1 <- ggplot(slide.df, aes(x=rank_default, y=rank_slide, color=r.diff))+
  geom_point()+scale_y_reverse()+
  geom_text_repel(data=filter(slide.df, r.diff>300), aes(label=gene_name))+
  scale_color_viridis_c(option="F", direction=-1)+
  geom_abline(aes(slope=-1, intercept=0), lty=2)+
  labs(x="rank (no batch)",y="rank (batch)", subtitle="\u0394 rank")+
  theme_bw()
```

```{r view diff plots}
#| fig-height: 4
#| fig-width: 9
grid.arrange(dev1, rank1, ncol=2, top="\u0394 deviance and \u0394 rank clearly separate outliers")
```

## Examine expression with dotplot

```{r set cutoff}
#| echo: true
biased.genes = filter(slide.df, r.diff>300 | d.diff>.5)$gene
names(biased.genes) = rowData(spe)[biased.genes,"gene_name"]
```

```{r prep dotplot}
plot.df <- dotplotDF(biased.genes, spe, norm.to.mbp=F)
```

```{r plot dotplot}
#| fig-height: 4
#| fig-width: 7
ggplot(plot.df %>% mutate(ylabel=factor(ylabel, 
                                        levels=c("C5orf63","CHI3L1","SERPINA3","MTRNR2L1","MTRNR2L8","AL627171.2","MTRNR2L12"))), 
       aes(x=xlabel, y=ylabel, size=n, color=scaled_avg))+
  geom_count()+
  scale_color_gradientn(colors=c("#4575b4","grey90","#d73027"), 
                        limits=c(min(plot.df$scaled_avg)-.1,
                                 max(plot.df$scaled_avg)+.1),
                        values=c(0,.33,1))+
  scale_size(limits=c(0,1))+
  facet_grid(cols=vars(slide), scales="free_x")+
  labs(x="",y="",size="prop. spots",color="scaled expr\n(logcounts)")+
  theme_bw()+theme(axis.text.x=element_text(angle=45, hjust=1, size=6),
                   strip.text=element_text(size=6))
```

Two or three features show clear patterns of slide-biased expression (MTRNR2L12, AL627171.2, and partially MTRNR2L8).

For the remaining features (MTRNR2L1, SERPINA3, CHI3L1, C5orf63), although the average slide expression may indicate a slide batch effect, the dotplot suggests that individual samples drive these differences.

## Spatial expression plots

Looking at the unscaled logNormCounts values in the context of the spatial dimension, we can confirm slide-biased expression of MTRNR2L12 and AL627171.2.

```{r spe list}
spe_list = unique(spe$sample_id)
names(spe_list) = lapply(spe_list, function(x) unique(colData(spe)[spe$sample_id==x,"brain"]))
spe_list = lapply(spe_list, function(x) spe[,colData(spe)$sample_id==x])
```

```{r mtrnr2l12 spatial}
#| warning: false
p1 <- lapply(seq_along(spe_list), function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["MTRNR2L12"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["MTRNR2L12"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
```

```{r plot mtrnr2l12}
#| output: false
g1 = do.call(grid.arrange, c(p1, ncol=4, top="MTRNR2L12", 
                                   bottom="MTRNR2L12 color scales are fixed/equal across all sub-plots",
                             newpage=F))
```

```{r al6 spatial}
#| warning: false
p2 <- lapply(seq_along(spe_list), function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["AL627171.2"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["AL627171.2"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
```

```{r plot al6 spatial}
#| output: false
g2 = do.call(grid.arrange, c(p2, ncol=4, top="AL627171.2", 
                                   bottom="AL627171.2 color scales are fixed/equal across all sub-plots",
                             newpage=F))
```

```{r view mtrnr2l12 and al6 spatial}
#| fig-height: 7
#| fig-width: 8
grid.arrange(g1, g2, ncol=2)
```

However, MTRNR2L8 clearly is most influenced by sample-specific variation rather than slide.

```{r mtrnr2l8 spatial}
#| warning: false
p3 <- lapply(seq_along(spe_list), function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["MTRNR2L8"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["MTRNR2L8"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
```

```{r view mtrnr2l8}
#| fig-height: 7
#| fig-width: 4
do.call(grid.arrange, c(p3, ncol=4, top="MTRNR2L8", 
                                   bottom="color scales are fixed/equal across all sub-plots"))
```

## Sample-specific bias?

Our experimental design includes only 1 sample per subject, such that no two samples came from the same brain donor. Thus, batch effect of subject and sample are one and the same.

As we established with the spatialLIBD example, there can be subject-specific non-biologically meaningful (for spatial clustering) variation in gene expression.

However, the concern with examining sample-specific variation in gene expression with our dataset is that there are between-sample differences in tissue composition (the proportion of spots corresponding to the different spatial domains). It would be problematic it using deviance residuals to identify sample-biased features identified key layer markers that have different expression across samples due to change in number of spots-per-sample comprising the different cortical layers.

Using the original raw SVG clustering outcome as a guide, we can see that Br5902 has a substantially higher proportion of WM spots than the other samples.

```{r tissue comp df}
tissue.comp = as.data.frame(colData(spe)[,c("brain","slide","clust_k7_svg.raw_layers")]) %>% 
  mutate(clust_k7_svg.raw_layers=factor(clust_k7_svg.raw_layers, 
                                        levels=c("L1","L1 (2)","L2","L3","L5/6","WM"),
                                        labels=c("L1","L1","L2","L3","L5/6","WM"))) %>%
  group_by(brain, slide, clust_k7_svg.raw_layers) %>% tally() %>% 
  group_by(brain, slide) %>% mutate(total=sum(n), prop=n/total)
```

```{r plot tissue comp}
#| fig-height: 5
#| fig-width: 10
ggplot(filter(tissue.comp, clust_k7_svg.raw_layers!="bad"), 
       aes(x=slide, y=prop, label=brain, color=slide))+
  geom_text(size=3, position=position_jitter(height=.01, width=0))+
  scale_color_brewer(palette="Dark2")+
  facet_wrap(vars(clust_k7_svg.raw_layers), ncol=3)+
  labs(title="Tissue composition of samples")+
  theme_bw()+theme(axis.text.x=element_text(size=8, angle=45, hjust=1))
```

Notably, Br5902 appears to contribute to the identification of MTRNR2L1, SERPINA3, and CHI3L1 as subject/sample-biased (dotplot above).

```{r wm enrich df}
wm.genes = rownames(spe)[rowData(spe)$gene_name %in% c("MAL","MBP","OLIG1")]
names(wm.genes) = rowData(spe)[wm.genes,"gene_name"]

check.wm.mtx <- cbind(sapply(wm.genes, function(x) logcounts(spe)[x,]))

spd.expr.df = cbind.data.frame(
  as.data.frame(colData(spe)[,c("brain","slide","clust_k7_svg.raw_layers")]),
  check.wm.mtx) %>% 
  filter(clust_k7_svg.raw_layers!="bad") %>%
  mutate(clust_k7_svg.raw_layers=factor(clust_k7_svg.raw_layers, 
                                        levels=c("L1","L1 (2)","L2","L3","L5/6","WM"),
                                        labels=c("L1","L1","L2","L3","L5/6","WM"))) %>%
  group_by(brain, slide, clust_k7_svg.raw_layers) %>% 
  summarise_all(mean) %>%
  tidyr::pivot_longer(names(wm.genes), 
                      names_to="gene_name", values_to="avg.logcounts")
```

```{r plot wm enrich}
spd1 = ggplot(spd.expr.df,
       aes(x=clust_k7_svg.raw_layers, y=avg.logcounts, fill=slide))+
  geom_boxplot(show.legend=F)+scale_fill_brewer(palette="Dark2")+
  geom_point(aes(color=slide), alpha=0)+scale_color_brewer(palette="Dark2")+
  facet_grid(rows=vars(gene_name), scales="free_y")+
  labs(x="spatial domain (SVGs k=7)", y="mean logcounts expr",
       title="WM markers")+
  theme_bw()+theme(legend.text=element_text(size=8), legend.position="bottom")
```

```{r check slide df}
check.genes = biased.genes[c("MTRNR2L1","SERPINA3","CHI3L1")]

check.genes.mtx <- cbind(sapply(check.genes, function(x) logcounts(spe)[x,]))

spd.expr.df2 = cbind.data.frame(
  as.data.frame(colData(spe)[,c("brain","slide","clust_k7_svg.raw_layers")]),
  check.genes.mtx) %>% 
  filter(clust_k7_svg.raw_layers!="bad") %>%
  mutate(clust_k7_svg.raw_layers=factor(clust_k7_svg.raw_layers, 
                                        levels=c("L1","L1 (2)","L2","L3","L5/6","WM"),
                                        labels=c("L1","L1","L2","L3","L5/6","WM"))) %>%
  group_by(brain, slide, clust_k7_svg.raw_layers) %>% 
  summarise_all(mean) %>%
  tidyr::pivot_longer(names(check.genes), 
                      names_to="gene_name", values_to="avg.logcounts")
```

```{r plot check slide}
spd2 = ggplot(mutate(spd.expr.df2, 
                     gene_name=factor(gene_name, levels=c("MTRNR2L1","SERPINA3","CHI3L1"))),
       aes(x=clust_k7_svg.raw_layers, y=avg.logcounts, fill=slide))+
  geom_boxplot(show.legend=F)+scale_fill_brewer(palette="Dark2")+
  geom_point(aes(color=slide), alpha=0)+scale_color_brewer(palette="Dark2")+
  geom_text(data=filter(spd.expr.df2, brain=="Br5902"), aes(label=brain),
            size=2)+
  facet_grid(rows=vars(gene_name), scales="free_y")+
  labs(x="spatial domain (SVGs k=7)", y="mean logcounts expr",
       title="Br5902-driven biased genes")+
  theme_bw()+theme(legend.text=element_text(size=8), legend.position="bottom")
```

We observed that unlike standard WM markers (left), the expression of MTRNR2L1, SERPINA3, and CHI3L1 expression are relatively equal across different spatial domains, both within the apparent outlier Br5902 and in other slides/samples (right plot).

```{r view slide bias not wm}
#| fig-height: 6
#| fig-width: 7
grid.arrange(addSmallLegend(spd1), addSmallLegend(spd2), ncol=2)
```

To confirm this, we again refer to the unscaled logNormCounts values with the spatial expression plots (showing only a subset of samples for simplicity).

```{r mtrnr2l1 spatial}
#| warning: false
p4 <- lapply(seq_along(spe_list), function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["MTRNR2L1"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["MTRNR2L1"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
```

```{r view mtrnr2l1}
#| fig-height: 7
#| fig-width: 4
do.call(grid.arrange, c(p4,#[c(3,4,6,21)], 
                              ncol=4, top="MTRNR2L1", 
                bottom="color scales are fixed/equal across all sub-plots"))
```

```{r serpina3 spatial}
#| warning: false
p5 <- lapply(seq_along(spe_list), function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["SERPINA3"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["SERPINA3"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
```

```{r view serpina3}
#| fig-height: 7
#| fig-width: 4
do.call(grid.arrange, c(p5,#[c(3,4,6,21)], 
                              ncol=4, top="SERPINA3", 
                bottom="color scales are fixed/equal across all sub-plots"))
```

```{r chi3l1 spatial}
#| warning: false
p6 <- lapply(seq_along(spe_list), function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["CHI3L1"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["CHI3L1"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
```

```{r view chi3l1}
#| fig-height: 7
#| fig-width: 4
do.call(grid.arrange, c(p6,#[c(3,4,6,21)], 
                              ncol=4, top="CHI3L1", 
                bottom="color scales are fixed/equal across all sub-plots"))
```

These data indicate that it is worth exploring a subject batch effect in our data, though we must examine a potential influence of tissue composition before proceeding.
