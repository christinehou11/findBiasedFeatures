---
title: "MBv: batch = slide"
format: 
  html:
    toc: true
    toc-depth: 3
echo: false
editor: visual
---

```{r setup}
#| output: false
library(SpatialExperiment)
library(dplyr)
library(ggplot2)
library(ggspavis)
library(gridExtra)
library(ggrepel)
source("code/helper_functions.r")
```

```{r load spe}
load("processed-data/spe_norm.Rdata")
```

## Intro to MBv project

Having established the ability of the approach with a sample dataset, we now switch gears to look at our own data (MBv dataset).

#### Experimental design {.unnumbered}

Our 10X Visium RNAseq dataset was generated from a single sequencing run and contains 24 human DLPFC samples. This is the first portion of a final dataset that will contain 120 samples, so with this subset it is imperative that we learn how to optimize our analysis pipeline.

Each of the 24 samples was collected from a single brain donor/ subject.

```{r}
#| echo: true
length(unique(spe$brain))
length(unique(spe$sample_id))
```

The samples are organized 4 per slide (6 total slides) with 2 male and 2 female samples per slide.

```{r}
table(distinct(as.data.frame(colData(spe)[,c("sex","slide","brain")]))[,c("sex","slide")])
```

The first batch effect we sought to investigate in the MBv dataset is `batch= slide`.

#### Goal of this analysis {.unnumbered}

The goal of this analysis is to perform feature-based QC to remove features contributing to non-spatially meaningful biological variation from our list of spatially variable genes (SVGs).

As we showed in the background chapter, using `nnSVG` for feature selection in the MBv data produced a list of features that represent the spectrum of layer-specific markers in the DLPFC (Figure 1.3). We then demonstrated with the `spatialLIBD` dataset that SVGs were highly ranked by `scry::devianceFeatureSelection`.

```{r hidden }
slide.df = read.csv("processed-data/bindev_default-slide_svgs-only.csv")
```

When we performed the binomial deviance models on the MBv dataset (all features, n=36601), we found that the SVGs were even more highly ranked after inclusion of a `batch= slide`.

```{r summary all genes rank}
all.df = read.csv("processed-data/bindev_default-slide.csv", row.names=1)
cat("Summary of SVG rank:\n")
summary(all.df[slide.df$gene,"rank_default"])
```

```{r summary all genes rank batch}
cat("Summary of SVG rank (batch= slide):\n")
summary(all.df[slide.df$gene,"rank_slide"])
```

Given the high rank of SVGs in the binomial deviance models and the substantial processing time required to run the model on all features, we decided to run `devianceFeatureSelection` on only the SVGs.

## Binomial model deviance residuals

```{r read binomial deviance results}
#| echo: true
#read in the results of both models
slide.df = read.csv("processed-data/bindev_default-slide_svgs-only.csv")
```

```{r plot default}
sl1 = ggplot(slide.df, aes(x=rank_default, y=dev_default))+
  geom_point(size=.5)+
  scale_y_log10()+
  labs(x="rank", y="deviance", title="batch= NULL")+
  theme_bw()
```

```{r plot batch}
sl2 = ggplot(slide.df, aes(x=rank_slide, y=dev_slide))+
  geom_point(size=.5)+
  scale_y_log10()+
  labs(x="rank", y="deviance", title="batch= slide")+
  theme_bw()
```

*Figure 3.1 Results of binomial deviance model performed on SVGs only (n= 2098 features)*

```{r view slide models}
#| fig-height: 2.5
#| fig-width: 5
grid.arrange(sl1, sl2, ncol=2)
```

To isolate the influence of `batch= slide` we calculated the relative change in deviance and the difference in rank as established with the `spatialLIBD` dataset.

```{r calc diff}
#| echo: true
#care about loss of deviance
slide.df$d.diff = (slide.df$dev_default-slide.df$dev_slide)/slide.df$dev_slide
# care about increase in rank
slide.df$r.diff = slide.df$rank_slide-slide.df$rank_default
```

```{r plot dev diff}
dev1 <- ggplot(slide.df, aes(x=dev_default, y=dev_slide, color=d.diff))+
  geom_point()+
  scale_x_log10()+scale_y_log10()+
  geom_text_repel(data=filter(slide.df, d.diff>.5), aes(label=gene_name))+
  scale_color_viridis_c(option="F", direction=-1, limits=c(0,1), breaks=c(0,.5,1))+
  geom_abline(aes(slope=1, intercept=0), lty=2)+
  labs(x="deviance (no batch)", y="deviance (batch)", subtitle="\u0394 deviance")+
  theme_bw()+theme(legend.position="inside", legend.position.inside=c(.15,.8),
                   legend.title = element_text(size = 10), 
                   legend.text  = element_text(size = 10),
                   legend.key.size = unit(.6, "lines"))
```

```{r plot rank diff}
rank1 <- ggplot(slide.df, aes(x=rank_default, y=rank_slide, color=r.diff))+
  geom_point()+scale_y_reverse()+
  geom_text_repel(data=filter(slide.df, r.diff>300), aes(label=gene_name))+
  scale_color_viridis_c(option="F", direction=-1, breaks=c(0,250,500))+
  geom_abline(aes(slope=-1, intercept=0), lty=2)+
  labs(x="rank (no batch)",y="rank (batch)", subtitle="\u0394 rank")+
  theme_bw()+theme(legend.position="inside", legend.position.inside=c(.85,.8),
                   legend.title = element_text(size = 10), 
                   legend.text  = element_text(size = 10),
                   legend.key.size = unit(.6, "lines"))
```

These calculations distinguish several SVGs as potentially biased but altogether exhibited smaller magnitude changes compared to the subject effect in the `spatialLIBD` data (Figure 2.4).

*Figure 3.2 Difference in deviance and rank distinguish outliers (n= 2098)*

```{r view diff plots}
#| fig-height: 3.5
#| fig-width: 7
grid.arrange(dev1, rank1, ncol=2)
```

## Examining potentially biased expression patterns with a dotplot

Even though the influence of `batch= slide` was more subtle than expected from the `spatialLIBD` data, our difference metrics still clealy distinguished a small number of potentially biased SVGs.

```{r set cutoff}
#| echo: true
biased.genes = filter(slide.df, r.diff>300 | d.diff>.5)$gene
names(biased.genes) = rowData(spe)[biased.genes,"gene_name"]
```

```{r prep dotplot}
#| output: false
plot.df <- dotplotDF(biased.genes, spe, norm.to.mbp=F)
```

```{r}
slide.df$cutoff = slide.df$gene %in% biased.genes
slide.df$biased = slide.df$gene_name %in% c("MTRNR2L8","AL627171.2","MTRNR2L12")
slide.df$group = factor(paste(slide.df$cutoff, slide.df$biased),
                        levels=c("FALSE FALSE","TRUE FALSE","TRUE TRUE"))
scat <- ggplot(slide.df, aes(x=r.diff, y=d.diff, color=group))+
  geom_point(size=.8)+
  geom_text_repel(data= filter(slide.df, gene %in% biased.genes), 
                  aes(label=gene_name), size=3)+
  scale_color_manual(values=c("grey","black","red3"))+
  labs(x="\u0394 rank", y="\u0394 deviance", title="true slide-bias pattern (red)")+
  theme_bw()+theme(legend.position="none", title=element_text(size=10),
                   plot.margin=unit(c(1,0,1,.5), units="cm"))
```

```{r plot dotplot}
dp <- ggplot(plot.df %>% mutate(ylabel=factor(ylabel, 
                                        levels=c("C5orf63","CHI3L1","SERPINA3","MTRNR2L1","MTRNR2L8","AL627171.2","MTRNR2L12"))), 
       aes(x=xlabel, y=ylabel, size=n, color=scaled_avg))+
  geom_count()+
  scale_color_gradientn(colors=c("#4575b4","grey90","#d73027"), 
                        limits=c(min(plot.df$scaled_avg)-.1,
                                 max(plot.df$scaled_avg)+.1),
                        values=c(0,.33,1))+
  scale_size(limits=c(0,1))+
  facet_grid(cols=vars(slide), scales="free_x")+
  labs(x="",y="",size="prop. spots",color="scaled expr\n(logcounts)")+
  theme_bw()+theme(axis.text.x=element_text(angle=45, hjust=1, size=6),
                   strip.text=element_text(size=6))
```

We found that of the seven total potentially slide-biased genes, only 2-3 (MTRNR2L12, AL627171.2, and maybe MTRNR2L8) displayed expression patterns indicative of slide-specific influence. For the remaining features (MTRNR2L1, SERPINA3, CHI3L1, C5orf63), although the average slide expression may indicate a slide batch effect, the dotplot suggests that individual samples drive these differences.

*Figure 3.3 Summary of potentially slide-biased genes*

```{r}
#| fig-height: 4
#| fig-width: 9
grid.arrange(scat, dp, layout_matrix=matrix(c(1,1,2,2,2,2),, nrow=1))
```

## Spatial expression plots

To support the influence of slide on the expression of these potentially biased genes we looking at the unscaled logcount expression for each sample, reconstructing the initial 2D coordinates.

```{r spe list}
spe_list = unique(spe$sample_id)
names(spe_list) = lapply(spe_list, function(x) unique(colData(spe)[spe$sample_id==x,"brain"]))
spe_list = lapply(spe_list, function(x) spe[,colData(spe)$sample_id==x])
```

```{r mtrnr2l12 spatial}
#| warning: false
p1 <- lapply(seq_along(spe_list), function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["MTRNR2L12"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["MTRNR2L12"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
```

```{r plot mtrnr2l12}
#| output: false
g1 = do.call(grid.arrange, c(p1, ncol=4, top="MTRNR2L12", newpage=F))
```

```{r al6 spatial}
#| warning: false
p2 <- lapply(seq_along(spe_list), function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["AL627171.2"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["AL627171.2"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
```

```{r plot al6 spatial}
#| output: false
g2 = do.call(grid.arrange, c(p2, ncol=4, top="AL627171.2",newpage=F))
```

These plots confirm the conclusions from the dotplot that MTRNR2L12 and AL627171.2 exhibit slide-biased expression with increased abundance in the first two slides. For these figures each row corresponds to a single slide, and the tissue samples are displayed in the order they are positioned on the slide.

*Figure 3.4 Identification two slide-biased SVGs in the MBv dataset*

```{r view mtrnr2l12 and al6 spatial}
#| fig-height: 7
#| fig-width: 9
grid.arrange(g1, g2, ncol=2, layout_matrix=matrix(c(1,1,1,1,NA,2,2,2,2), nrow=1),
             bottom="Feature-specific colors scales are fixed/equal across all subplots")
```

However, MTRNR2L8 clearly is most influenced by sample-specific variation rather than slide.

```{r mtrnr2l8 spatial}
#| warning: false
p3 <- lapply(seq_along(spe_list), function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["MTRNR2L8"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["MTRNR2L8"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
```

*Figure 3.5 MTRNR2L8 expression is augmented in a single subject*

```{r view mtrnr2l8}
#| fig-height: 7
#| fig-width: 4
do.call(grid.arrange, c(p3, ncol=4, top="MTRNR2L8", 
                                   bottom="color scales are fixed/equal across all sub-plots"))
```

## Sample-specific bias?

As we established with the spatialLIBD example, there can be subject-specific expression patterns that have the potential to confound spatial domain clustering (Figure 2.6, Figure 2.8). Our experimental design includes only one sample per subject, such that no two samples came from the same brain donor. Thus, any batch effect of subject and sample are indistinguishable.

The concern with examining sample-specific variation in gene expression within our dataset (and potentially any SRT dataset) is that the proportion of observations corresponding to the different spatial domains varies across samples. Despite considerable efforts to collect tissue sections that are representative of all DLPFC layers, there are between-sample (aka between-subject) differences in tissue composition.

We used the original raw SVG clusters (K=7; Figure 1.1) as a rough guide to see how tissue composition changed across samples. We combined the two L1 clusters and removed the L5/6 cluster since the merging of two layers might skew some samples more than others. We can see that Br5902 has a substantially higher proportion of WM spots than the other samples.

```{r tissue comp df}
tissue.comp = as.data.frame(colData(spe)[,c("brain","slide","clust_k7_svg.raw_layers")]) %>% 
  mutate(clust_k7_svg.raw_layers=factor(clust_k7_svg.raw_layers, 
                                        levels=c("L1","L1 (2)","L2","L3","L5/6","WM"),
                                        labels=c("L1","L1","L2","L3","L5/6","WM"))) %>%
  group_by(brain, slide, clust_k7_svg.raw_layers) %>% tally() %>% 
  group_by(brain, slide) %>% mutate(total=sum(n), prop=n/total)
```

*Figure 3.6 Most domains are evenly distributed across subjects, with one exception in WM*

```{r plot tissue comp}
#| fig-height: 3
#| fig-width: 8
ggplot(filter(tissue.comp, clust_k7_svg.raw_layers!="bad" & 
                clust_k7_svg.raw_layers!="L5/6"), 
       aes(x=slide, y=n, label=brain, color=slide))+
  geom_text(size=3, position=position_jitter(height=.01, width=0))+
  scale_x_discrete(expand=c(.15,.15))+
  scale_color_brewer(palette="Dark2")+
  facet_grid(cols=vars(clust_k7_svg.raw_layers))+
  labs(y="number of observations (spots)")+
  theme_bw()+theme(axis.text.x=element_text(size=6, angle=45, hjust=1),
                   legend.position="none")
```

### Do WM spots account for expression of some subject-biased genes?

Our approach to identifying biased genes would be problematic/ ineffective if applying a `batch= subject` effect to the binomial deviance model identified key layer markers as subject-biased. Notably, the subject with an uncommonly high number of WM spots (Br5902) is also the subject that appears to contribute to the identification of MTRNR2L1, SERPINA3, and CHI3L1 as subject/sample-biased (Figure 3.3).

To see if WM spots were likely to drive the bias in these 3 features, we compared the expression of known WM markers across rough spatial domains to the expression of MTRNR2L1, SERPINA3, and CHI3L1. If the potentially Br5902-biased features exhibited similar expression patterns across spatial domains as the known WM markers, then it is possible that tissue composition is responsible for the identification of these features as potentially biased.

```{r wm enrich df}
wm.genes = rownames(spe)[rowData(spe)$gene_name %in% c("MAL","MBP","OLIG1")]
names(wm.genes) = rowData(spe)[wm.genes,"gene_name"]

check.wm.mtx <- cbind(sapply(wm.genes, function(x) logcounts(spe)[x,]))

spd.expr.df = cbind.data.frame(
  as.data.frame(colData(spe)[,c("brain","slide","clust_k7_svg.raw_layers")]),
  check.wm.mtx) %>% 
  filter(clust_k7_svg.raw_layers!="bad") %>%
  mutate(clust_k7_svg.raw_layers=factor(clust_k7_svg.raw_layers, 
                                        levels=c("L1","L1 (2)","L2","L3","L5/6","WM"),
                                        labels=c("L1","L1","L2","L3","L5/6","WM"))) %>%
  group_by(brain, slide, clust_k7_svg.raw_layers) %>% 
  summarise_all(mean) %>%
  tidyr::pivot_longer(names(wm.genes), 
                      names_to="gene_name", values_to="avg.logcounts")
```

```{r plot wm enrich}
spd1 = ggplot(spd.expr.df,
       aes(x=clust_k7_svg.raw_layers, y=avg.logcounts, fill=slide))+
  geom_boxplot(show.legend=F)+scale_fill_brewer(palette="Dark2")+
  geom_point(aes(color=slide), alpha=0)+scale_color_brewer(palette="Dark2")+
  facet_grid(rows=vars(gene_name), scales="free_y")+
  labs(x="spatial domain (SVGs k=7)", y="mean logcounts expr",
       title="WM markers")+
  theme_bw()+theme(legend.text=element_text(size=8), legend.position="bottom")
```

```{r check slide df}
check.genes = biased.genes[c("MTRNR2L1","SERPINA3","CHI3L1")]

check.genes.mtx <- cbind(sapply(check.genes, function(x) logcounts(spe)[x,]))

spd.expr.df2 = cbind.data.frame(
  as.data.frame(colData(spe)[,c("brain","slide","clust_k7_svg.raw_layers")]),
  check.genes.mtx) %>% 
  filter(clust_k7_svg.raw_layers!="bad") %>%
  mutate(clust_k7_svg.raw_layers=factor(clust_k7_svg.raw_layers, 
                                        levels=c("L1","L1 (2)","L2","L3","L5/6","WM"),
                                        labels=c("L1","L1","L2","L3","L5/6","WM"))) %>%
  group_by(brain, slide, clust_k7_svg.raw_layers) %>% 
  summarise_all(mean) %>%
  tidyr::pivot_longer(names(check.genes), 
                      names_to="gene_name", values_to="avg.logcounts")
```

```{r plot check slide}
spd2 = ggplot(mutate(spd.expr.df2, 
                     gene_name=factor(gene_name, levels=c("MTRNR2L1","SERPINA3","CHI3L1"))),
       aes(x=clust_k7_svg.raw_layers, y=avg.logcounts, fill=slide))+
  geom_boxplot(show.legend=F)+scale_fill_brewer(palette="Dark2")+
  geom_point(aes(color=slide), alpha=0)+scale_color_brewer(palette="Dark2")+
  geom_text(data=filter(spd.expr.df2, brain=="Br5902"), aes(label=brain),
            size=2)+
  facet_grid(rows=vars(gene_name), scales="free_y")+
  labs(x="spatial domain (SVGs k=7)", y="mean logcounts expr",
       title="Br5902-driven biased genes")+
  theme_bw()+theme(legend.text=element_text(size=8), legend.position="bottom")
```

*Figure 3.7 Expression of MTRNR2L1, SERPINA3, and CHI3L1 does not indicate an influence of tissue composition*

```{r view slide bias not wm}
#| fig-height: 6
#| fig-width: 7
grid.arrange(addSmallLegend(spd1), addSmallLegend(spd2), ncol=2)
```

We observed that unlike standard WM markers (left), the expression of MTRNR2L1, SERPINA3, and CHI3L1 expression are relatively equal across different spatial domains (right), both for the apparent outlier Br5902 and in other slides/samples. This suggests that our approach to identifying biased features is not sensitive to differences in tissue composition.

To confirm this, we again visualized the unscaled logcounts, juxtaposing MBP expression (denoting WM) with the potentially subject-biased genes. We display only the first two slides for ease of comparison.

```{r mbp spatial}
#| output: false
p4 <- lapply(1:8, function(x) {
  plotSpots(spe_list[[x]], annotate=wm.genes["MBP"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[wm.genes["MBP"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
g4 = do.call(grid.arrange, c(p4, ncol=4, top="MBP", newpage=F))
```

```{r mtrnr2l1 spatial}
#| output: false
p5 <- lapply(1:8, function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["MTRNR2L1"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["MTRNR2L1"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
g5 = do.call(grid.arrange, c(p5, ncol=4, top="MTRNR2L1", newpage=F))
```

```{r serpina3 spatial}
#| output: false
p6 <- lapply(1:8, function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["SERPINA3"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["SERPINA3"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
g6 = do.call(grid.arrange, c(p6, ncol=4, top="SERPINA3", newpage=F))
```

```{r chi3l1 spatial}
#| output: false
p7 <- lapply(1:8, function(x) {
  plotSpots(spe_list[[x]], annotate=biased.genes["CHI3L1"], 
            assay_name="logcounts", point_size=.1)+
    scale_color_gradient(limits=c(0,max(logcounts(spe)[biased.genes["CHI3L1"],])), 
                         low='grey90', high='black')+
    labs(title=unique(spe_list[[x]]$brain))+
    theme(legend.position="none", plot.title=element_text(size=8))
})
g7 = do.call(grid.arrange, c(p7, ncol=4, top="CHI3L1", newpage=F))
```

*Figure 3.8 Confirmation that WM spots do not drive subject-bias of MTRNR2L1, SERPINA3, and CHI3L1*

```{r view mtrnr2l1}
#| fig-height: 5.5
#| fig-width: 9
grid.arrange(g4, g5, g6, g7, layout_matrix=rbind(c(1,1,1,1,NA,2,2,2,2),
                                         c(3,3,3,3,NA,4,4,4,4)),
             bottom="Feature-specific colors scales are fixed/equal across all subplots")
```

We conclude that none of the potentially subject-biased genes flagged by the addition of `batch= slide` reflect meaningful differences in tissue composition.

### Moving forwards

It is important to note that the 5 potentially subject-biased SVGs identified here were flagged when considering the influence of `batch= slide`. Next we will explore the impact of `batch= subject`, checking for a potential influence of tissue composition before proceeding.
